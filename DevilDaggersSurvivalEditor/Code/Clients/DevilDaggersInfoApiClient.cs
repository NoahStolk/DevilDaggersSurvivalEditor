//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace DevilDaggersSurvivalEditor.Code.Clients
{
	using System = global::System;

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class DevilDaggersInfoApiClient
	{
		private System.Net.Http.HttpClient _httpClient;
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

		public DevilDaggersInfoApiClient(System.Net.Http.HttpClient httpClient)
		{
			_httpClient = httpClient;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
		}

		private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
		{
			var settings = new Newtonsoft.Json.JsonSerializerSettings();
			UpdateJsonSerializerSettings(settings);
			return settings;
		}

		protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<CustomLeaderboard>> CustomLeaderboards_GetCustomLeaderboardsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/custom-leaderboards");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<CustomLeaderboard>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<UploadSuccess> CustomLeaderboards_UploadScoreAsync(UploadRequest uploadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (uploadRequest == null)
				throw new System.ArgumentNullException("uploadRequest");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/custom-leaderboards");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(uploadRequest, _settings.Value));
					content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<UploadSuccess>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 401)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 500)
						{
							string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("A server side error occurred.", status_, responseText_, headers_, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Dagger>> Daggers_GetDaggersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/daggers");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Dagger>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Dagger> Daggers_GetDaggerAtSecondsAsync(int? seconds = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/daggers/at-time?");
			if (seconds != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("seconds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(seconds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Dagger>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Death>> Deaths_GetDeathsAsync(GameVersion? gameVersion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/deaths?");
			if (gameVersion != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("gameVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Death>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Death>> Deaths_GetDeathsByTypeAsync(int? type = null, GameVersion? gameVersion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/deaths/by-type?");
			if (type != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (gameVersion != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("gameVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Death>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Death>> Deaths_GetDeathsByNameAsync(string? name = null, GameVersion? gameVersion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/deaths/by-name?");
			if (name != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (gameVersion != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("gameVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Death>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Enemy>> Enemies_GetEnemiesAsync(GameVersion? gameVersion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/enemies?");
			if (gameVersion != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("gameVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Enemy>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Enemy>> Enemies_GetEnemiesByNameAsync(string? enemyName = null, GameVersion? gameVersion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/enemies/by-name?");
			if (enemyName != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("enemyName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(enemyName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (gameVersion != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("gameVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Enemy>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Enemy>> Enemies_GetEnemyBySpawnsetTypeAsync(byte? spawnsetType = null, GameVersion? gameVersion = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/enemies/by-type?");
			if (spawnsetType != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("spawnsetType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(spawnsetType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (gameVersion != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("gameVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Enemy>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.DateTimeOffset> GameVersions_GetGameVersionReleaseDateAsync(GameVersion gameVersion, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			if (gameVersion == null)
				throw new System.ArgumentNullException("gameVersion");

			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/game-versions/{gameVersion}/release-date");
			urlBuilder_.Replace("{gameVersion}", System.Uri.EscapeDataString(ConvertToString(gameVersion, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.DateTimeOffset>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<GameVersion> GameVersions_GetGameVersionAtDateAsync(System.DateTimeOffset? date = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/game-versions/at-date?");
			if (date != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<GameVersion>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, Entry>> LeaderboardHistory_GetUserProgressionByIdAsync(int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboard-history/user-progression?");
			if (userId != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.Dictionary<string, Entry>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<WorldRecord>> LeaderboardHistory_GetWorldRecordsAsync(System.DateTimeOffset? date = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboard-history/world-records?");
			if (date != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(date.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<WorldRecord>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<ValueTupleOfDateTimeAndDateTime> LeaderboardHistory_GetLatestDatePlayedAsync(int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboard-history/latest-date-played?");
			if (userId != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ValueTupleOfDateTimeAndDateTime>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, long>> LeaderboardHistory_GetUserActivityAsync(int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboard-history/user-activity?");
			if (userId != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.Dictionary<string, long>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Leaderboard> Leaderboards_GetLeaderboardAsync(int? rankStart = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboards?");
			if (rankStart != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("rankStart") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rankStart, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Leaderboard>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Entry> Leaderboards_GetUserByIdAsync(int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboards/user/by-id?");
			if (userId != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Entry>> Leaderboards_GetUserByUsernameAsync(string? username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboards/user/by-username?");
			if (username != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Entry>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<Entry> Leaderboards_GetUserByRankAsync(int? rank = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/leaderboards/user/by-rank?");
			if (rank != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("rank") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rank, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<CustomLeaderboard>> Legacy_GetCustomLeaderboardsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetCustomLeaderboards");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<CustomLeaderboard>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<Leaderboard> Legacy_GetLeaderboardAsync(int? rank = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetLeaderboard?");
			if (rank != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("rank") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rank, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Leaderboard>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task Legacy_GetSpawnsetAsync(string? fileName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetSpawnset?");
			if (fileName != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("fileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpawnsetFile>> Legacy_GetSpawnsetsAsync(string? searchAuthor = null, string? searchName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetSpawnsets?");
			if (searchAuthor != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("searchAuthor") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchAuthor, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (searchName != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("searchName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<SpawnsetFile>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task Legacy_GetToolAsync(string? toolName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetTool?");
			if (toolName != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("toolName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toolName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Tool>> Legacy_GetToolsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetTools");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Tool>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<Entry> Legacy_GetUserByIdAsync(int? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetUserById?");
			if (userId != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("userId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<Entry> Legacy_GetUserByRankAsync(int? rank = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetUserByRank?");
			if (rank != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("rank") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rank, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<Entry>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		[System.Obsolete]
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Entry>> Legacy_GetUserByUsernameAsync(string? username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/GetUserByUsername?");
			if (username != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("username") + "=").Append(System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Entry>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpawnsetFile>> Spawnsets_GetSpawnsetsAsync(string? authorFilter = null, string? nameFilter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/spawnsets?");
			if (authorFilter != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("authorFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(authorFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			if (nameFilter != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("nameFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(nameFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<SpawnsetFile>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task Spawnsets_GetSpawnsetFileAsync(string? fileName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/spawnsets/{fileName}/file");
			urlBuilder_.Replace("{fileName}", System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.Generic.List<Tool>> Tools_GetToolsAsync(string? toolNameFilter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/tools?");
			if (toolNameFilter != null)
			{
				urlBuilder_.Append(System.Uri.EscapeDataString("toolNameFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toolNameFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			}
			urlBuilder_.Length--;

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.List<Tool>>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task Tools_GetToolFileAsync(string? toolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/tools/{toolName}/file");
			urlBuilder_.Replace("{toolName}", System.Uri.EscapeDataString(ConvertToString(toolName, System.Globalization.CultureInfo.InvariantCulture)));

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							return;
						}
						else
						if (status_ == 400)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						if (status_ == 404)
						{
							var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							throw new DevilDaggersInfoApiException<ProblemDetails>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="DevilDaggersInfoApiException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<WebStatsResult> Website_GetStatsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append("api/website/stats");

			var client_ = _httpClient;
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						if (response_.Content != null && response_.Content.Headers != null)
						{
							foreach (var item_ in response_.Content.Headers)
								headers_[item_.Key] = item_.Value;
						}

						ProcessResponse(client_, response_);

						var status_ = (int)response_.StatusCode;
						if (status_ == 200)
						{
							var objectResponse_ = await ReadObjectResponseAsync<WebStatsResult>(response_, headers_).ConfigureAwait(false);
							if (objectResponse_.Object == null)
							{
								throw new DevilDaggersInfoApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
							}
							return objectResponse_.Object;
						}
						else
						{
							var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new DevilDaggersInfoApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
			}
		}

		protected struct ObjectResponseResult<T>
		{
			public ObjectResponseResult(T responseObject, string responseText)
			{
				this.Object = responseObject;
				this.Text = responseText;
			}

			public T Object { get; }

			public string Text { get; }
		}

		public bool ReadResponseAsString { get; set; }

		protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
		{
			if (response == null || response.Content == null)
			{
				return new ObjectResponseResult<T>(default(T)!, string.Empty);
			}

			if (ReadResponseAsString)
			{
				var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
				try
				{
					var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
					return new ObjectResponseResult<T>(typedBody!, responseText);
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
					throw new DevilDaggersInfoApiException(message, (int)response.StatusCode, responseText, headers, exception);
				}
			}
			else
			{
				try
				{
					using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
					using (var streamReader = new System.IO.StreamReader(responseStream))
					using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
					{
						var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
						var typedBody = serializer.Deserialize<T>(jsonTextReader);
						return new ObjectResponseResult<T>(typedBody!, string.Empty);
					}
				}
				catch (Newtonsoft.Json.JsonException exception)
				{
					var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
					throw new DevilDaggersInfoApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
				}
			}
		}

		[return: System.Diagnostics.CodeAnalysis.NotNullIfNotNull("value")]
		private string? ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
		{
			if (value == null)
			{
				return null;
			}

			if (value is System.Enum)
			{
				var name = System.Enum.GetName(value.GetType(), value);
				if (name != null)
				{
					var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
					if (field != null)
					{
						var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
							as System.Runtime.Serialization.EnumMemberAttribute;
						if (attribute != null)
						{
							return attribute.Value != null ? attribute.Value : name;
						}
					}

					return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
				}
			}
			else if (value is bool)
			{
				return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
			}
			else if (value is byte[])
			{
				return System.Convert.ToBase64String((byte[])value);
			}
			else if (value.GetType().IsArray)
			{
				var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
				return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
			}

			var result = System.Convert.ToString(value, cultureInfo);
			return (result is null) ? string.Empty : result;
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CustomLeaderboard
	{
		[Newtonsoft.Json.JsonProperty("spawnsetFileName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string SpawnsetFileName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("bronze", Required = Newtonsoft.Json.Required.Always)]
		public int Bronze { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("silver", Required = Newtonsoft.Json.Required.Always)]
		public int Silver { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("golden", Required = Newtonsoft.Json.Required.Always)]
		public int Golden { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("devil", Required = Newtonsoft.Json.Required.Always)]
		public int Devil { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homing", Required = Newtonsoft.Json.Required.Always)]
		public int Homing { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("dateLastPlayed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? DateLastPlayed { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("dateCreated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.DateTimeOffset? DateCreated { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UploadSuccess
	{
		[Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Message { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("totalPlayers", Required = Newtonsoft.Json.Required.Always)]
		public int TotalPlayers { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("leaderboard", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public CustomLeaderboard Leaderboard { get; set; } = new CustomLeaderboard();

		[Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public CustomLeaderboardCategory Category { get; set; } = new CustomLeaderboardCategory();

		[Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<CustomEntry> Entries { get; set; } = new System.Collections.Generic.List<CustomEntry>();

		[Newtonsoft.Json.JsonProperty("isNewUserOnThisLeaderboard", Required = Newtonsoft.Json.Required.Always)]
		public bool IsNewUserOnThisLeaderboard { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Always)]
		public int Rank { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("rankDiff", Required = Newtonsoft.Json.Required.Always)]
		public int RankDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
		public int Time { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("timeDiff", Required = Newtonsoft.Json.Required.Always)]
		public int TimeDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("kills", Required = Newtonsoft.Json.Required.Always)]
		public int Kills { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("killsDiff", Required = Newtonsoft.Json.Required.Always)]
		public int KillsDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gems", Required = Newtonsoft.Json.Required.Always)]
		public int Gems { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gemsDiff", Required = Newtonsoft.Json.Required.Always)]
		public int GemsDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHit", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersHit { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHitDiff", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersHitDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFired", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersFired { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFiredDiff", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersFiredDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("enemiesAlive", Required = Newtonsoft.Json.Required.Always)]
		public int EnemiesAlive { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("enemiesAliveDiff", Required = Newtonsoft.Json.Required.Always)]
		public int EnemiesAliveDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homing", Required = Newtonsoft.Json.Required.Always)]
		public int Homing { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homingDiff", Required = Newtonsoft.Json.Required.Always)]
		public int HomingDiff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime2", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime2 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime2Diff", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime2Diff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime3", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime3 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime3Diff", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime3Diff { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime4", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime4 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime4Diff", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime4Diff { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CustomLeaderboardCategory
	{
		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("sortingPropertyName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string SortingPropertyName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("ascending", Required = Newtonsoft.Json.Required.Always)]
		public bool Ascending { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("layoutPartialName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string LayoutPartialName { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class CustomEntry
	{
		[Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Always)]
		public int PlayerId { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
		public int Time { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gems", Required = Newtonsoft.Json.Required.Always)]
		public int Gems { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("kills", Required = Newtonsoft.Json.Required.Always)]
		public int Kills { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("deathType", Required = Newtonsoft.Json.Required.Always)]
		public int DeathType { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHit", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersHit { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFired", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersFired { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("enemiesAlive", Required = Newtonsoft.Json.Required.Always)]
		public int EnemiesAlive { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homing", Required = Newtonsoft.Json.Required.Always)]
		public int Homing { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime2", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime2 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime3", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime3 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime4", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime4 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("submitDate", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset SubmitDate { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("clientVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? ClientVersion { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ProblemDetails
	{
		[Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Type { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Title { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? Status { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Detail { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Instance { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.Dictionary<string, object>? Extensions { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class UploadRequest
	{
		[Newtonsoft.Json.JsonProperty("spawnsetHash", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string SpawnsetHash { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("playerId", Required = Newtonsoft.Json.Required.Always)]
		public int PlayerId { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Username { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
		public int Time { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gems", Required = Newtonsoft.Json.Required.Always)]
		public int Gems { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("kills", Required = Newtonsoft.Json.Required.Always)]
		public int Kills { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("deathType", Required = Newtonsoft.Json.Required.Always)]
		public int DeathType { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHit", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersHit { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFired", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersFired { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("enemiesAlive", Required = Newtonsoft.Json.Required.Always)]
		public int EnemiesAlive { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homing", Required = Newtonsoft.Json.Required.Always)]
		public int Homing { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime2", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime2 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime3", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime3 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("levelUpTime4", Required = Newtonsoft.Json.Required.Always)]
		public int LevelUpTime4 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("ddclClientVersion", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string DdclClientVersion { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Validation { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Dagger : DevilDaggersEntity
	{

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public abstract partial class DevilDaggersEntity
	{
		[Newtonsoft.Json.JsonProperty("gameVersion", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public GameVersion GameVersion { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("colorCode", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string ColorCode { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public enum GameVersion
	{
		[System.Runtime.Serialization.EnumMember(Value = @"V1")]
		V1 = 0,

		[System.Runtime.Serialization.EnumMember(Value = @"V2")]
		V2 = 1,

		[System.Runtime.Serialization.EnumMember(Value = @"V3")]
		V3 = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Death : DevilDaggersEntity
	{
		[Newtonsoft.Json.JsonProperty("deathType", Required = Newtonsoft.Json.Required.Always)]
		public int DeathType { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Enemy : DevilDaggersEntity
	{
		[Newtonsoft.Json.JsonProperty("hp", Required = Newtonsoft.Json.Required.Always)]
		public int Hp { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gems", Required = Newtonsoft.Json.Required.Always)]
		public int Gems { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("noFarmGems", Required = Newtonsoft.Json.Required.Always)]
		public int NoFarmGems { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("spawnsetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public byte? SpawnsetType { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("death", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public Death? Death { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homing3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Homing3 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("homing4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? Homing4 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("registerKill", Required = Newtonsoft.Json.Required.Always)]
		public bool RegisterKill { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("spawnedBy", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<Enemy> SpawnedBy { get; set; } = new System.Collections.Generic.List<Enemy>();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Entry
	{
		[Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.Always)]
		public int Rank { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
		public int Id { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Username { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Always)]
		public int Time { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("kills", Required = Newtonsoft.Json.Required.Always)]
		public int Kills { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gems", Required = Newtonsoft.Json.Required.Always)]
		public int Gems { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("deathType", Required = Newtonsoft.Json.Required.Always)]
		public int DeathType { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHit", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersHit { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFired", Required = Newtonsoft.Json.Required.Always)]
		public int DaggersFired { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("timeTotal", Required = Newtonsoft.Json.Required.Always)]
		public long TimeTotal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("killsTotal", Required = Newtonsoft.Json.Required.Always)]
		public long KillsTotal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gemsTotal", Required = Newtonsoft.Json.Required.Always)]
		public long GemsTotal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("deathsTotal", Required = Newtonsoft.Json.Required.Always)]
		public long DeathsTotal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHitTotal", Required = Newtonsoft.Json.Required.Always)]
		public long DaggersHitTotal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFiredTotal", Required = Newtonsoft.Json.Required.Always)]
		public long DaggersFiredTotal { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class WorldRecord
	{
		[Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset DateTime { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("entry", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public Entry Entry { get; set; } = new Entry();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ValueTupleOfDateTimeAndDateTime
	{
		[Newtonsoft.Json.JsonProperty("item1", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset Item1 { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("item2", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset Item2 { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Leaderboard
	{
		/// <summary>Represents the UTC date and time when the leaderboard was fetched.</summary>
		[Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset DateTime { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("players", Required = Newtonsoft.Json.Required.Always)]
		public int Players { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("timeGlobal", Required = Newtonsoft.Json.Required.Always)]
		public long TimeGlobal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("killsGlobal", Required = Newtonsoft.Json.Required.Always)]
		public long KillsGlobal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("gemsGlobal", Required = Newtonsoft.Json.Required.Always)]
		public long GemsGlobal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("deathsGlobal", Required = Newtonsoft.Json.Required.Always)]
		public long DeathsGlobal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersHitGlobal", Required = Newtonsoft.Json.Required.Always)]
		public long DaggersHitGlobal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("daggersFiredGlobal", Required = Newtonsoft.Json.Required.Always)]
		public long DaggersFiredGlobal { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<Entry> Entries { get; set; } = new System.Collections.Generic.List<Entry>();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SpawnsetFile
	{
		[Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public SpawnsetFileSettings Settings { get; set; } = new SpawnsetFileSettings();

		[Newtonsoft.Json.JsonProperty("spawnsetData", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public SpawnsetData SpawnsetData { get; set; } = new SpawnsetData();

		[Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Path { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string FileName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Author { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SpawnsetFileSettings
	{
		[Newtonsoft.Json.JsonProperty("maxWaves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public int? MaxWaves { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string? Description { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset LastUpdated { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class SpawnsetData
	{
		[Newtonsoft.Json.JsonProperty("nonLoopSpawnCount", Required = Newtonsoft.Json.Required.Always)]
		public int NonLoopSpawnCount { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("loopSpawnCount", Required = Newtonsoft.Json.Required.Always)]
		public int LoopSpawnCount { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("nonLoopLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? NonLoopLength { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("loopLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public float? LoopLength { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Tool
	{
		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Name { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string DisplayName { get; set; } = default!;

		/// <summary>Indicates the current version of the tool on the website.</summary>
		[Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string VersionNumber { get; set; } = default!;

		/// <summary>Indicates the oldest version of the tool which is still fully compatible with the website.</summary>
		[Newtonsoft.Json.JsonProperty("versionNumberRequired", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string VersionNumberRequired { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("changelog", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<ChangelogEntry> Changelog { get; set; } = new System.Collections.Generic.List<ChangelogEntry>();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class ChangelogEntry
	{
		[Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string VersionNumber { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset Date { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("changes", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<Change> Changes { get; set; } = new System.Collections.Generic.List<Change>();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class Change
	{
		[Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Description { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("subChanges", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public System.Collections.Generic.List<Change>? SubChanges { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class WebStatsResult
	{
		[Newtonsoft.Json.JsonProperty("websiteBuildDateTime", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset WebsiteBuildDateTime { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("taskResults", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.Collections.Generic.List<TaskResult> TaskResults { get; set; } = new System.Collections.Generic.List<TaskResult>();


	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.24.0 (Newtonsoft.Json v12.0.0.0)")]
	public partial class TaskResult
	{
		[Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string TypeName { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastTriggered", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset LastTriggered { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("lastFinished", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.DateTimeOffset LastFinished { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("executionTime", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public System.TimeSpan ExecutionTime { get; set; } = default!;

		[Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
		public string Schedule { get; set; } = default!;


	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class DevilDaggersInfoApiException : System.Exception
	{
		public int StatusCode { get; private set; }

		public string? Response { get; private set; }

		public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public DevilDaggersInfoApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
			: base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "13.7.0.0 (NJsonSchema v10.1.24.0 (Newtonsoft.Json v12.0.0.0))")]
	public partial class DevilDaggersInfoApiException<TResult> : DevilDaggersInfoApiException
	{
		public TResult Result { get; private set; }

		public DevilDaggersInfoApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108